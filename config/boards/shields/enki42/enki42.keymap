#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <dt-bindings/zmk/ext_power.h>

#define _ &kp
#define ___ &none
#define ______ &trans

#define DEF 0
#define NAV 1
#define NUM 2
#define FUN 3

#define NTAB LC(TAB)
#define PTAB LC(LS(TAB))

#define NSPC LC(LG(RIGHT))
#define PSPC LC(LG(LEFT))

#define GRV RA(GRAVE)
#define BSL RA(BSLH)

&sk {
        release-after-ms = <60000>;
};

/ {
        behaviors {
                swapper: swapper {
                        compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
                        label = "SWAPPER";
                        #binding-cells = <0>;
                        bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;

                        ignored-key-positions = <1 2 4 5 8 9 13 16 17 18 19>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from win-tab
                };
                tabber: tabber {
                        compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
                        label = "TABBER";
                        #binding-cells = <0>;
                        bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;

                        ignored-key-positions = <1 2 4 5 8 9 13 16 17 18 19>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from ctrl-tab
                };
        };

        macros {
                lc: mo_layer_switch_with_an_embeded_cancel_tap_for_clearing_any_queued_sticky_mods_on_press {
                        label = "LAYER_CANCEL";
                        compatible = "zmk,behavior-macro-one-param";
                        wait-ms = <0>;
                        tap-ms = <0>;
                        #binding-cells = <1>;
                        bindings =
                                <&macro_tap>,
                                <&kp K_CANCEL &macro_param_1to1>,
                                <&macro_press>,
                                <&mo MACRO_PLACEHOLDER>,
                                <&macro_pause_for_release>,
                                <&macro_param_1to1>,
                                <&macro_release>,
                                <&mo MACRO_PLACEHOLDER>;
                };
        };

        conditional_layers {
                compatible = "zmk,conditional-layers";

                nav_plus_sym_equals_fun {
                        if-layers  = <NAV NUM>;
                        then-layer = <FUN>;
                };
        };

        combos {
                compatible = "zmk,combos";

                combo_r0c0c1 {
                        key-positions = <0 1>;
                        bindings = <_ RA(O)>;
                        layers = <0>;
                };
                combo_r0c1c2 {
                        key-positions = <1 2>;
                        bindings = <_ LBRC>;
                        layers = <0>;
                };
                combo_r0c2c3 {
                        key-positions = <2 3>;
                        bindings = <_ T>;
                        layers = <0>;
                };

                combo_r1c0c1 {
                        key-positions = <10 11>;
                        bindings = <_ RA(L)>;
                        layers = <0>;
                };
                combo_r1c1c2 {
                        key-positions = <11 12>;
                        bindings = <_ LBKT>;
                        layers = <0>;
                };
                combo_r1c2c3 {
                        key-positions = <12 13>;
                        bindings = <_ G>;
                        layers = <0>;
                };

                combo_r2c0c1 {
                        key-positions = <20 21>;
                        bindings = <_ UNDER>;
                        layers = <0>;
                };
                combo_r2c1c2 {
                        key-positions = <21 22>;
                        bindings = <_ MINUS>;
                        layers = <0>;
                };
                combo_r2c2c3 {
                        key-positions = <22 23>;
                        bindings = <_ B>;
                        layers = <0>;
                };

                combo_c0r1r2 {
                        key-positions = <0 10>;
                        bindings = <_ N1>;
                        layers = <0>;
                };
                combo_c1r1r2 {
                        key-positions = <1 11>;
                        bindings = <_ N2>;
                        layers = <0>;
                };
                combo_c2r1r2 {
                        key-positions = <2 12>;
                        bindings = <_ N3>;
                        layers = <0>;
                };
                combo_c3r1r2 {
                        key-positions = <3 13>;
                        bindings = <_ N4>;
                        layers = <0>;
                };

                combo_c0r2r3 {
                        key-positions = <10 20>;
                        bindings = <_ GRV>;
                        layers = <0>;
                };
                combo_c1r2r3 {
                        key-positions = <11 21>;
                        bindings = <_ GRAVE>;
                        layers = <0>;
                };
                combo_c2r2r3 {
                        key-positions = <12 22>;
                        bindings = <_ TILDE>;
                        layers = <0>;
                };
                combo_c3r2r3 {
                        key-positions = <13 23>;
                        bindings = <_ N5>;
                        layers = <0>;
                };

                combo_r0c4c5 {
                        key-positions = <6 7>;
                        bindings = <_ Y>;
                        layers = <0>;
                };
                combo_r0c5c6 {
                        key-positions = <7 8>;
                        bindings = <_ RBRC>;
                        layers = <0>;
                };
                combo_r0c6c7 {
                        key-positions = <8 9>;
                        bindings = <_ RA(P)>;
                        layers = <0>;
                };

                combo_r1c4c5 {
                        key-positions = <16 17>;
                        bindings = <_ H>;
                        layers = <0>;
                };
                combo_r1c5c6 {
                        key-positions = <17 18>;
                        bindings = <_ RBKT>;
                        layers = <0>;
                };
                combo_r1c6c7 {
                        key-positions = <18 19>;
                        bindings = <_ RA(SEMI)>;
                        layers = <0>;
                };

                combo_r2c4c5 {
                        key-positions = <26 27>;
                        bindings = <_ N>;
                        layers = <0>;
                };
                combo_r2c5c6 {
                        key-positions = <27 28>;
                        bindings = <_ EQUAL>;
                        layers = <0>;
                };
                combo_r2c6c7 {
                        key-positions = <28 29>;
                        bindings = <_ PLUS>;
                        layers = <0>;
                };

                combo_c4r1r2 {
                        key-positions = <6 16>;
                        bindings = <_ N7>;
                        layers = <0>;
                };
                combo_c5r1r2 {
                        key-positions = <7 17>;
                        bindings = <_ N8>;
                        layers = <0>;
                };
                combo_c6r1r2 {
                        key-positions = <8 18>;
                        bindings = <_ N9>;
                        layers = <0>;
                };
                combo_c7r1r2 {
                        key-positions = <9 19>;
                        bindings = <_ N0>;
                        layers = <0>;
                };

                combo_c4r2r3 {
                        key-positions = <16 26>;
                        bindings = <_ N6>;
                        layers = <0>;
                };
                combo_c5r2r3 {
                        key-positions = <17 27>;
                        bindings = <_ BSLH>;
                        layers = <0>;
                };
                combo_c6r2r3 {
                        key-positions = <18 28>;
                        bindings = <_ PIPE>;
                        layers = <0>;
                };
                combo_c7r2r3 {
                        key-positions = <19 29>;
                        bindings = <_ BSL>;
                        layers = <0>;
                };

                combo_fn_r0c0c1 {
                        key-positions = <0 1>;
                        bindings = <_ F7>;
                        layers = <2>;
                };
                combo_fn_r0c1c2 {
                        key-positions = <1 2>;
                        bindings = <_ F8>;
                        layers = <2>;
                };
                combo_fn_r0c2c3 {
                        key-positions = <2 3>;
                        bindings = <_ F9>;
                        layers = <2>;
                };

                combo_fn_r1c0c1 {
                        key-positions = <10 11>;
                        bindings = <_ F4>;
                        layers = <2>;
                };
                combo_fn_r1c1c2 {
                        key-positions = <11 12>;
                        bindings = <_ F5>;
                        layers = <2>;
                };
                combo_fn_r1c2c3 {
                        key-positions = <12 13>;
                        bindings = <_ F6>;
                        layers = <2>;
                };

                combo_fn_r2c0c1 {
                        key-positions = <20 21>;
                        bindings = <_ F1>;
                        layers = <2>;
                };
                combo_fn_r2c1c2 {
                        key-positions = <21 22>;
                        bindings = <_ F2>;
                        layers = <2>;
                };
                combo_fn_r2c2c3 {
                        key-positions = <22 23>;
                        bindings = <_ F3>;
                        layers = <2>;
                };

                combo_fn_r0c4c5 {
                        key-positions = <6 7>;
                        bindings = <_ F10>;
                        layers = <2>;
                };
                combo_fn_r0c5c6 {
                        key-positions = <7 8>;
                        bindings = <_ F11>;
                        layers = <2>;
                };
                combo_fn_r0c6c7 {
                        key-positions = <8 9>;
                        bindings = <_ F12>;
                        layers = <2>;
                };

                combo_fn_r2c4c5 {
                        key-positions = <20 21>;
                        bindings = <_ F13>;
                        layers = <2>;
                };
                combo_fn_r2c5c6 {
                        key-positions = <21 22>;
                        bindings = <_ F14>;
                        layers = <2>;
                };
                combo_fn_r2c6c7 {
                        key-positions = <22 23>;
                        bindings = <_ F15>;
                        layers = <2>;
                };
        };
         
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   _ Q        _ W        _ E        _ R       _ T             _ Y        _ U        _ I        _ O       _ P   
   _ A        _ S        _ D        _ F       _ G             _ H        _ J        _ K        _ L       _ SEMI
   _ Z        _ X        _ C        _ V       _ B             _ N        _ M        _ COMMA    _ DOT     _ FSLH
                                    &lc NAV   _ SPACE         _ LSHFT    &lc NUM
                        >;
                };

                nav_layer {
                        bindings = <
   &tabber    &swapper   _ PTAB     _ NTAB    ___             ___        _ HOME     _ END      _ BSPC    _ DEL
   &sk LGUI   &sk LALT   &sk LCTRL  &sk LSHFT ___             ___        _ LEFT     _ DOWN     _ UP      _ RIGHT
   _ PSPC     _ NSPC     _ PSCRN    _ CAPS    ___             ___        _ RET      _ TAB      _ ESC     _ KP_NUM
                                    ______    ______          ______     ______
                        >;
                };

                num_layer {
                        bindings = <
   _ LBKT     _ KP_N7    _ KP_N8    _ KP_N9    ___            ___       _ KP_PLUS  _ KP_MINUS _ KP_MULTIPLY _ KP_DIVIDE
   _ KP_N0    _ KP_N4    _ KP_N5    _ KP_N6    ___            ___       &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI
   _ RBKT     _ KP_N1    _ KP_N2    _ KP_N3    ___            ___       _ RET      _ TAB      _ ESC     _ KP_NUM
                                    ______     ______         ______     ______
                        >;
                };

                fun_layer {
                        bindings = <
   _ KP_N1    _ KP_N2    _ KP_N3    _ KP_N4    _ KP_N5        _ KP_N6    _ KP_N7    _ KP_N8    _ KP_N9   _ KP_N0
   &sk LGUI   &sk LALT   &sk LCTRL  &sk LSHFT  _ F11          _ F12      &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI
   _ F1       _ F2       _ F3       _ F4       _ F5           _ F6       _ F7       _ F8       _ F9      _ F10
                                    ______     ______         ______     ______
                        >;
                };
        };
};
